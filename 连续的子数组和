题目描述：
给定一个包含非负数的数组和一个目标整数 k，编写一个函数来判断该数组是否含有连续的子数组，
其大小至少为 2，总和为 k 的倍数，即总和为 n*k，其中 n 也是一个整数。

示例
输入: [23,2,4,6,7], k = 6
输出: True
解释: [2,4] 是一个大小为 2 的子数组，并且和为 6。

解题思路：
双重循环，第一重i从0开始，第二重j从i+1开始。同时使用变量记录i到j的和。

代码：
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int count;
        for(int i = 0; i < n; ++i){
            count = nums[i];
            for(int j = i + 1; j < n; ++j){
                count += nums[j];
                if(k == 0 && count == 0)
                    return true;
                if(k != 0 && count % k == 0)
                    return true;
            }
        }
        return false;
    }
};
